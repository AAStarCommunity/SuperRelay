/// SuperRelay Complete API Documentation - Auto-generated by utoipa
use serde::{Deserialize, Serialize};
use serde_json::Value;
use utoipa::{OpenApi, ToSchema};

/// Main API documentation structure containing all SuperRelay APIs
#[derive(OpenApi)]
#[openapi(
    paths(
        json_rpc_endpoint,
        // Paymaster API
        pm_sponsor_user_operation,
        // ERC-4337 Core API
        eth_send_user_operation,
        eth_estimate_user_operation_gas,
        eth_get_user_operation_by_hash,
        eth_get_user_operation_receipt,
        eth_supported_entry_points,
        // Chain Information
        eth_chain_id,
        net_version,
        // Rundler Pool API
        rundler_get_ops_in_pool,
        rundler_remove_ops_from_pool,
        rundler_clear_pool,
        rundler_get_pool_stats,
        // Rundler Builder API
        rundler_get_bundle_stats,
        rundler_get_bundle_by_hash,
        rundler_send_bundle_now,
        // Debug API
        debug_bundler_dump_mempool,
        debug_bundler_send_bundle_now,
        debug_bundler_clear_mempool,
        debug_bundler_set_bundling_mode,
        // Admin API
        admin_clear_state,
        admin_set_tracking,
        admin_dump_reputation,
        // Monitoring endpoints
        health_endpoint,
        e2e_endpoint,
        metrics_endpoint
    ),
    components(
        schemas(
            JsonRpcRequest,
            JsonRpcResponse,
            JsonRpcError,
            HealthResponse,
            UserOperation,
            ErrorResponse
        )
    ),
    tags(
        (name = "json-rpc", description = "🔄 JSON-RPC 2.0 API - 支持25个完整方法"),
        (name = "paymaster-api", description = "💰 Paymaster API - Gas费赞助服务"),
        (name = "erc4337-core", description = "⚡ ERC-4337 Core API - 用户操作核心功能"),
        (name = "chain-info", description = "🔗 Chain Information - 链信息查询"),
        (name = "rundler-pool", description = "🏊 Rundler Pool API - 内存池管理"),
        (name = "rundler-builder", description = "🏗️ Rundler Builder API - Bundle构建"),
        (name = "debug-api", description = "🐛 Debug API - 调试和开发工具"),
        (name = "admin-api", description = "👑 Admin API - 系统管理功能"),
        (name = "monitoring", description = "📊 系统监控和健康检查")
    ),
    info(
        title = "SuperRelay Complete API",
        version = "0.2.0", 
        description = r#"
# SuperRelay - Complete ERC-4337 Account Abstraction Solution

SuperRelay 是基于 Rundler 构建的企业级 Account Abstraction 解决方案，提供完整的 ERC-4337 生态系统支持。

## 🚀 JSON-RPC 2.0 API (25个方法)

所有API调用通过POST请求到根路径 `/` 进行：

### 1️⃣ Paymaster API (1 method)
- `pm_sponsorUserOperation` - UserOperation Gas费赞助

### 2️⃣ ERC-4337 Core API (5 methods)  
- `eth_sendUserOperation` - 发送用户操作到内存池
- `eth_estimateUserOperationGas` - 估算Gas费用
- `eth_getUserOperationByHash` - 根据哈希查询用户操作
- `eth_getUserOperationReceipt` - 获取用户操作收据
- `eth_supportedEntryPoints` - 获取支持的入口点

### 3️⃣ Chain Information (2 methods)
- `eth_chainId` - 获取链ID
- `net_version` - 获取网络版本

### 4️⃣ Rundler Pool API (4 methods)
- `rundler_getOpsInPool` - 获取内存池中的操作
- `rundler_removeOpsFromPool` - 从内存池移除操作
- `rundler_clearPool` - 清空内存池
- `rundler_getPoolStats` - 获取内存池统计

### 5️⃣ Rundler Builder API (3 methods)
- `rundler_getBundleStats` - 获取Bundle统计
- `rundler_getBundleByHash` - 根据哈希获取Bundle
- `rundler_sendBundleNow` - 立即发送Bundle

### 6️⃣ Debug API (4 methods)
- `debug_bundler_dumpMempool` - 导出内存池状态
- `debug_bundler_sendBundleNow` - 调试发送Bundle
- `debug_bundler_clearMempool` - 清空调试内存池
- `debug_bundler_setBundlingMode` - 设置Bundle模式

### 7️⃣ Admin API (3 methods)
- `admin_clearState` - 清除系统状态
- `admin_setTracking` - 设置跟踪模式
- `admin_dumpReputation` - 导出声誉数据

### 8️⃣ Monitoring API (3 methods)
- `health` - 健康检查
- `ready` - 就绪检查  
- `metrics` - Prometheus指标

## 📘 使用示例

```bash
# Paymaster 赞助 UserOperation
curl -X POST http://localhost:3000/ \
  -H "Content-Type: application/json" \
  -d '{
    "jsonrpc": "2.0",
    "method": "pm_sponsorUserOperation",
    "params": [
      {
        "sender": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
        "nonce": "0x0",
        "callData": "0x",
        "callGasLimit": "0x30D40",
        "verificationGasLimit": "0x186A0",
        "preVerificationGas": "0xC350",
        "maxFeePerGas": "0x59682F00",
        "maxPriorityFeePerGas": "0x59682F00",
        "signature": "0x",
        "initCode": "0x",
        "paymasterAndData": "0x"
      },
      "0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789"
    ],
    "id": 1
  }'
```

更多信息: https://github.com/aastar/super-relay
        "#,
        contact(
            name = "SuperRelay Team",
            url = "https://github.com/aastar/super-relay"
        ),
        license(
            name = "GPL-3.0-or-later",
            url = "https://www.gnu.org/licenses/gpl-3.0.html"
        )
    ),
    servers(
        (url = "http://localhost:3000", description = "开发环境 - SuperRelay 主服务"),
        (url = "http://127.0.0.1:3000", description = "本地测试环境")
    )
)]
pub struct CompleteApiDoc;

// ============================================================================
// Data Structures for OpenAPI generation
// ============================================================================

/// JSON-RPC 2.0 request structure
#[derive(Debug, Clone, Serialize, Deserialize, ToSchema)]
pub struct JsonRpcRequest {
    /// JSON-RPC version (always "2.0")
    pub jsonrpc: String,
    /// Method name
    pub method: String,
    /// Method parameters
    pub params: Value,
    /// Request identifier
    pub id: Value,
}

/// JSON-RPC 2.0 response structure
#[derive(Debug, Clone, Serialize, Deserialize, ToSchema)]
pub struct JsonRpcResponse {
    /// JSON-RPC version (always "2.0")
    pub jsonrpc: String,
    /// Method result (present on success)
    #[serde(skip_serializing_if = "Option::is_none")]
    pub result: Option<Value>,
    /// Error information (present on error)
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<JsonRpcError>,
    /// Request identifier
    pub id: Value,
}

/// JSON-RPC 2.0 error structure
#[derive(Debug, Clone, Serialize, Deserialize, ToSchema)]
pub struct JsonRpcError {
    /// Error code
    pub code: i32,
    /// Error message
    pub message: String,
    /// Additional error data
    #[serde(skip_serializing_if = "Option::is_none")]
    pub data: Option<Value>,
}

/// ERC-4337 UserOperation structure
#[derive(Debug, Clone, Serialize, Deserialize, ToSchema)]
pub struct UserOperation {
    /// Account contract address
    pub sender: String,
    /// Account nonce
    pub nonce: String,
    /// Call data for account execution
    #[serde(rename = "callData")]
    pub call_data: String,
    /// Gas limit for account execution
    #[serde(rename = "callGasLimit")]
    pub call_gas_limit: String,
    /// Gas limit for account verification
    #[serde(rename = "verificationGasLimit")]
    pub verification_gas_limit: String,
    /// Gas for pre-verification overhead
    #[serde(rename = "preVerificationGas")]
    pub pre_verification_gas: String,
    /// Maximum fee per gas
    #[serde(rename = "maxFeePerGas")]
    pub max_fee_per_gas: String,
    /// Maximum priority fee per gas
    #[serde(rename = "maxPriorityFeePerGas")]
    pub max_priority_fee_per_gas: String,
    /// Account signature
    pub signature: String,
    /// Account initialization code
    #[serde(rename = "initCode")]
    pub init_code: Option<String>,
    /// Paymaster address and data
    #[serde(rename = "paymasterAndData")]
    pub paymaster_and_data: Option<String>,
}

/// Health check response structure
#[derive(Debug, Clone, Serialize, Deserialize, ToSchema)]
pub struct HealthResponse {
    /// Overall system status
    pub status: String,
    /// Response timestamp
    pub timestamp: u64,
    /// System uptime in seconds
    pub uptime_seconds: u64,
    /// Component health status
    pub components: Value,
    /// System metrics
    pub metrics: Value,
}

/// Generic error response structure
#[derive(Debug, Clone, Serialize, Deserialize, ToSchema)]
pub struct ErrorResponse {
    /// Error code
    pub code: i32,
    /// Error message
    pub message: String,
    /// Additional error data
    pub data: Option<Value>,
}

// ============================================================================
// API Endpoint Handlers with utoipa annotations
// ============================================================================

/// JSON-RPC 2.0 主端点 - 支持所有25个API方法
#[utoipa::path(
    post,
    path = "/eth_sendUserOperation",
    tag = "json-rpc",
    request_body = JsonRpcRequest,
    responses(
        (status = 200, description = "JSON-RPC 响应", body = JsonRpcResponse),
        (status = 400, description = "无效请求", body = ErrorResponse),
        (status = 500, description = "内部错误", body = ErrorResponse)
    )
)]
pub async fn json_rpc_endpoint() {}

// ============================================================================
// 1️⃣ Paymaster API Methods (1 method)
// ============================================================================

/// pm_sponsorUserOperation - UserOperation Gas费赞助
#[utoipa::path(
    post,
    path = "/pm_sponsorUserOperation",
    tag = "paymaster-api",
    request_body(
        content = JsonRpcRequest,
        example = json!({
            "jsonrpc": "2.0",
            "method": "pm_sponsorUserOperation",
            "params": [
                {
                    "sender": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
                    "nonce": "0x0",
                    "callData": "0x",
                    "callGasLimit": "0x30D40",
                    "verificationGasLimit": "0x186A0", 
                    "preVerificationGas": "0xC350",
                    "maxFeePerGas": "0x59682F00",
                    "maxPriorityFeePerGas": "0x59682F00",
                    "signature": "0x",
                    "initCode": "0x",
                    "paymasterAndData": "0x"
                },
                "0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789"
            ],
            "id": 1
        })
    ),
    responses(
        (status = 200, description = "赞助成功，返回赞助后的UserOperation", body = JsonRpcResponse),
        (status = 400, description = "无效请求", body = ErrorResponse)
    )
)]
pub async fn pm_sponsor_user_operation() {}

// ============================================================================
// 2️⃣ ERC-4337 Core API Methods (5 methods)
// ============================================================================

/// eth_sendUserOperation - 发送用户操作到内存池
#[utoipa::path(
    post,
    path = "/eth_sendUserOperation",
    tag = "erc4337-core",
    request_body(
        content = JsonRpcRequest,
        example = json!({
            "jsonrpc": "2.0",
            "method": "eth_sendUserOperation",
            "params": [
                {
                    "sender": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
                    "nonce": "0x0",
                    "callData": "0x",
                    "callGasLimit": "0x30D40",
                    "verificationGasLimit": "0x186A0",
                    "preVerificationGas": "0xC350",
                    "maxFeePerGas": "0x59682F00",
                    "maxPriorityFeePerGas": "0x59682F00",
                    "signature": "0x",
                    "initCode": "0x",
                    "paymasterAndData": "0x"
                },
                "0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789"
            ],
            "id": 1
        })
    ),
    responses(
        (status = 200, description = "返回UserOperation哈希", body = JsonRpcResponse)
    )
)]
pub async fn eth_send_user_operation() {}

/// eth_estimateUserOperationGas - 估算Gas费用
#[utoipa::path(
    post,
    path = "/eth_estimateUserOperationGas",
    tag = "erc4337-core",
    request_body(
        content = JsonRpcRequest,
        example = json!({
            "jsonrpc": "2.0",
            "method": "eth_estimateUserOperationGas",
            "params": [
                {
                    "sender": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
                    "nonce": "0x0",
                    "callData": "0x",
                    "callGasLimit": "0x30D40",
                    "verificationGasLimit": "0x186A0",
                    "preVerificationGas": "0xC350",
                    "maxFeePerGas": "0x59682F00",
                    "maxPriorityFeePerGas": "0x59682F00",
                    "signature": "0x",
                    "initCode": "0x",
                    "paymasterAndData": "0x"
                },
                "0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789"
            ],
            "id": 1
        })
    ),
    responses(
        (status = 200, description = "返回Gas估算结果", body = JsonRpcResponse)
    )
)]
pub async fn eth_estimate_user_operation_gas() {}

/// eth_getUserOperationByHash - 根据哈希查询用户操作
#[utoipa::path(
    post,
    path = "/eth_getUserOperationByHash",
    tag = "erc4337-core",
    request_body(
        content = JsonRpcRequest,
        example = json!({
            "jsonrpc": "2.0",
            "method": "eth_getUserOperationByHash",
            "params": ["0x1234567890abcdef..."],
            "id": 1
        })
    ),
    responses(
        (status = 200, description = "返回UserOperation详情", body = JsonRpcResponse)
    )
)]
pub async fn eth_get_user_operation_by_hash() {}

/// eth_getUserOperationReceipt - 获取用户操作收据
#[utoipa::path(
    post,
    path = "/eth_getUserOperationReceipt",
    tag = "erc4337-core",
    request_body(
        content = JsonRpcRequest,
        example = json!({
            "jsonrpc": "2.0",
            "method": "eth_getUserOperationReceipt",
            "params": ["0x1234567890abcdef..."],
            "id": 1
        })
    ),
    responses(
        (status = 200, description = "返回交易收据", body = JsonRpcResponse)
    )
)]
pub async fn eth_get_user_operation_receipt() {}

/// eth_supportedEntryPoints - 获取支持的入口点
#[utoipa::path(
    post,
    path = "/eth_supportedEntryPoints",
    tag = "erc4337-core",
    request_body(
        content = JsonRpcRequest,
        example = json!({
            "jsonrpc": "2.0",
            "method": "eth_supportedEntryPoints",
            "params": [],
            "id": 1
        })
    ),
    responses(
        (status = 200, description = "返回支持的入口点地址列表", body = JsonRpcResponse)
    )
)]
pub async fn eth_supported_entry_points() {}

// ============================================================================
// 3️⃣ Chain Information Methods (2 methods)
// ============================================================================

/// eth_chainId - 获取链ID
#[utoipa::path(
    post,
    path = "/eth_chainId",
    tag = "chain-info",
    request_body(
        content = JsonRpcRequest,
        example = json!({
            "jsonrpc": "2.0",
            "method": "eth_chainId",
            "params": [],
            "id": 1
        })
    ),
    responses(
        (status = 200, description = "返回链ID", body = JsonRpcResponse)
    )
)]
pub async fn eth_chain_id() {}

/// net_version - 获取网络版本
#[utoipa::path(
    post,
    path = "/net_version",
    tag = "chain-info",
    request_body(
        content = JsonRpcRequest,
        example = json!({
            "jsonrpc": "2.0",
            "method": "net_version",
            "params": [],
            "id": 1
        })
    ),
    responses(
        (status = 200, description = "返回网络版本", body = JsonRpcResponse)
    )
)]
pub async fn net_version() {}

// ============================================================================
// 4️⃣ Rundler Pool API Methods (4 methods)
// ============================================================================

/// rundler_getOpsInPool - 获取内存池中的操作
#[utoipa::path(
    post,
    path = "/rundler_getOpsInPool",
    tag = "rundler-pool",
    request_body(
        content = JsonRpcRequest,
        example = json!({
            "jsonrpc": "2.0",
            "method": "rundler_getOpsInPool",
            "params": ["0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789"],
            "id": 1
        })
    ),
    responses(
        (status = 200, description = "返回内存池中的操作列表", body = JsonRpcResponse)
    )
)]
pub async fn rundler_get_ops_in_pool() {}

/// rundler_removeOpsFromPool - 从内存池移除操作
#[utoipa::path(
    post,
    path = "/rundler_removeOpsFromPool",
    tag = "rundler-pool",
    request_body(
        content = JsonRpcRequest,
        example = json!({
            "jsonrpc": "2.0",
            "method": "rundler_removeOpsFromPool",
            "params": [["0x1234567890abcdef..."]],
            "id": 1
        })
    ),
    responses(
        (status = 200, description = "移除成功确认", body = JsonRpcResponse)
    )
)]
pub async fn rundler_remove_ops_from_pool() {}

/// rundler_clearPool - 清空内存池
#[utoipa::path(
    post,
    path = "/rundler_clearPool",
    tag = "rundler-pool",
    request_body(
        content = JsonRpcRequest,
        example = json!({
            "jsonrpc": "2.0",
            "method": "rundler_clearPool",
            "params": [],
            "id": 1
        })
    ),
    responses(
        (status = 200, description = "清空成功确认", body = JsonRpcResponse)
    )
)]
pub async fn rundler_clear_pool() {}

/// rundler_getPoolStats - 获取内存池统计
#[utoipa::path(
    post,
    path = "/rundler_getPoolStats",
    tag = "rundler-pool",
    request_body(
        content = JsonRpcRequest,
        example = json!({
            "jsonrpc": "2.0",
            "method": "rundler_getPoolStats",
            "params": [],
            "id": 1
        })
    ),
    responses(
        (status = 200, description = "返回内存池统计信息", body = JsonRpcResponse)
    )
)]
pub async fn rundler_get_pool_stats() {}

// ============================================================================
// 5️⃣ Rundler Builder API Methods (3 methods)
// ============================================================================

/// rundler_getBundleStats - 获取Bundle统计
#[utoipa::path(
    post,
    path = "/rundler_getBundleStats",
    tag = "rundler-builder",
    request_body(
        content = JsonRpcRequest,
        example = json!({
            "jsonrpc": "2.0",
            "method": "rundler_getBundleStats",
            "params": [],
            "id": 1
        })
    ),
    responses(
        (status = 200, description = "返回Bundle统计信息", body = JsonRpcResponse)
    )
)]
pub async fn rundler_get_bundle_stats() {}

/// rundler_getBundleByHash - 根据哈希获取Bundle
#[utoipa::path(
    post,
    path = "/rundler_getBundleByHash",
    tag = "rundler-builder",
    request_body(
        content = JsonRpcRequest,
        example = json!({
            "jsonrpc": "2.0",
            "method": "rundler_getBundleByHash",
            "params": ["0x1234567890abcdef..."],
            "id": 1
        })
    ),
    responses(
        (status = 200, description = "返回Bundle详情", body = JsonRpcResponse)
    )
)]
pub async fn rundler_get_bundle_by_hash() {}

/// rundler_sendBundleNow - 立即发送Bundle
#[utoipa::path(
    post,
    path = "/rundler_sendBundleNow",
    tag = "rundler-builder",
    request_body(
        content = JsonRpcRequest,
        example = json!({
            "jsonrpc": "2.0",
            "method": "rundler_sendBundleNow",
            "params": [],
            "id": 1
        })
    ),
    responses(
        (status = 200, description = "发送Bundle成功确认", body = JsonRpcResponse)
    )
)]
pub async fn rundler_send_bundle_now() {}

// ============================================================================
// 6️⃣ Debug API Methods (4 methods)
// ============================================================================

/// debug_bundler_dumpMempool - 导出内存池状态
#[utoipa::path(
    post,
    path = "/debug_bundler_dumpMempool",
    tag = "debug-api",
    request_body(
        content = JsonRpcRequest,
        example = json!({
            "jsonrpc": "2.0",
            "method": "debug_bundler_dumpMempool",
            "params": [],
            "id": 1
        })
    ),
    responses(
        (status = 200, description = "返回内存池完整状态", body = JsonRpcResponse)
    )
)]
pub async fn debug_bundler_dump_mempool() {}

/// debug_bundler_sendBundleNow - 调试发送Bundle
#[utoipa::path(
    post,
    path = "/debug_bundler_sendBundleNow",
    tag = "debug-api",
    request_body(
        content = JsonRpcRequest,
        example = json!({
            "jsonrpc": "2.0",
            "method": "debug_bundler_sendBundleNow",
            "params": [],
            "id": 1
        })
    ),
    responses(
        (status = 200, description = "调试发送Bundle成功", body = JsonRpcResponse)
    )
)]
pub async fn debug_bundler_send_bundle_now() {}

/// debug_bundler_clearMempool - 清空调试内存池
#[utoipa::path(
    post,
    path = "/debug_bundler_clearMempool",
    tag = "debug-api",
    request_body(
        content = JsonRpcRequest,
        example = json!({
            "jsonrpc": "2.0",
            "method": "debug_bundler_clearMempool",
            "params": [],
            "id": 1
        })
    ),
    responses(
        (status = 200, description = "清空成功确认", body = JsonRpcResponse)
    )
)]
pub async fn debug_bundler_clear_mempool() {}

/// debug_bundler_setBundlingMode - 设置Bundle模式
#[utoipa::path(
    post,
    path = "/debug_bundler_setBundlingMode",
    tag = "debug-api",
    request_body(
        content = JsonRpcRequest,
        example = json!({
            "jsonrpc": "2.0",
            "method": "debug_bundler_setBundlingMode",
            "params": ["auto"],
            "id": 1
        })
    ),
    responses(
        (status = 200, description = "设置Bundle模式成功", body = JsonRpcResponse)
    )
)]
pub async fn debug_bundler_set_bundling_mode() {}

// ============================================================================
// 7️⃣ Admin API Methods (3 methods)
// ============================================================================

/// admin_clearState - 清除系统状态
#[utoipa::path(
    post,
    path = "/admin_clearState",
    tag = "admin-api",
    request_body(
        content = JsonRpcRequest,
        example = json!({
            "jsonrpc": "2.0",
            "method": "admin_clearState",
            "params": [],
            "id": 1
        })
    ),
    responses(
        (status = 200, description = "清除状态成功", body = JsonRpcResponse)
    )
)]
pub async fn admin_clear_state() {}

/// admin_setTracking - 设置跟踪模式
#[utoipa::path(
    post,
    path = "/admin_setTracking",
    tag = "admin-api",
    request_body(
        content = JsonRpcRequest,
        example = json!({
            "jsonrpc": "2.0",
            "method": "admin_setTracking",
            "params": [true],
            "id": 1
        })
    ),
    responses(
        (status = 200, description = "设置跟踪模式成功", body = JsonRpcResponse)
    )
)]
pub async fn admin_set_tracking() {}

/// admin_dumpReputation - 导出声誉数据
#[utoipa::path(
    post,
    path = "/admin_dumpReputation",
    tag = "admin-api",
    request_body(
        content = JsonRpcRequest,
        example = json!({
            "jsonrpc": "2.0",
            "method": "admin_dumpReputation",
            "params": [],
            "id": 1
        })
    ),
    responses(
        (status = 200, description = "返回声誉数据", body = JsonRpcResponse)
    )
)]
pub async fn admin_dump_reputation() {}

/// 健康检查端点
#[utoipa::path(
    get,
    path = "/health",
    tag = "monitoring",
    responses(
        (status = 200, description = "系统健康状态", body = HealthResponse)
    )
)]
pub async fn health_endpoint() {}

/// 端到端验证端点
#[utoipa::path(
    get,
    path = "/e2e",
    tag = "monitoring",
    responses(
        (status = 200, description = "E2E验证结果", body = Value)
    )
)]
pub async fn e2e_endpoint() {}

/// Prometheus指标端点
#[utoipa::path(
    get,
    path = "/metrics",
    tag = "monitoring",
    responses(
        (status = 200, description = "Prometheus格式指标", body = String, content_type = "text/plain")
    )
)]
pub async fn metrics_endpoint() {}
